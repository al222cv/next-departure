{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","departures","setDeparures","useEffect","makeCall","fetch","then","response","json","console","log","Departure","catch","error","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","map","dep","transportNumber","direction","time","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,oHC4E5BC,MAxEf,WAAiB,IAAD,EACqBC,mBAAS,IAD9B,mBACPC,EADO,KACKC,EADL,KAGdC,oBAAU,kBAAMC,KAAY,IAE5B,IAAMA,EAAW,WACfC,MACE,8HAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJC,QAAQC,IAAIF,EAAKG,WACjBT,EAAaM,EAAKG,aAEnBC,MAAM,SAAAC,GACLJ,QAAQI,MAAMA,MAMpB,OAyBF,SAAsBC,EAAUC,GAC9B,IAAMC,EAAgBC,mBAGtBd,oBACE,WACEa,EAAcE,QAAUJ,GAE1B,CAACA,IAIHX,oBACE,WAIE,GAAc,OAAVY,EAAgB,CAClB,IAAII,EAAKC,YAJX,WACEJ,EAAcE,WAGaH,GAC3B,OAAO,kBAAMM,cAAcF,MAG/B,CAACJ,IAjDHO,CAAY,kBAAMlB,KAAY,KAG5B,yBAAKmB,UAAU,OACb,+BACE,+BACE,4BACE,qCACA,wCACA,oDAGJ,+BACGtB,EAAWuB,IAAI,SAAAC,GAAG,OACjB,4BACE,4BAAKA,EAAIC,iBACT,4BAAKD,EAAIE,WACT,4BAAKF,EAAIG,WAKjB,gCCjCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.60d3fae9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState, useRef } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App () {\n  const [departures, setDeparures] = useState([])\n\n  useEffect(() => makeCall(), [])\n\n  const makeCall = () => {\n    fetch(\n      'https://api.resrobot.se/v2/departureBoard?key=4e22257c-71be-4b0b-b3dc-7ad652b0d8f6&id=740025626&maxJourneys=10&format=json'\n    )\n      .then(response => response.json())\n      .then(json => {\n        console.log(json.Departure)\n        setDeparures(json.Departure)\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }\n\n  useInterval(() => makeCall(), 10000)\n\n  return (\n    <div className='App'>\n      <table>\n        <thead>\n          <tr>\n            <th>Linje</th>\n            <th>Riktning</th>\n            <th>Nästa avgång</th>\n          </tr>\n        </thead>\n        <tbody>\n          {departures.map(dep => (\n            <tr>\n              <td>{dep.transportNumber}</td>\n              <td>{dep.direction}</td>\n              <td>{dep.time}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div />\n    </div>\n  )\n}\n\nfunction useInterval (callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(\n    () => {\n      savedCallback.current = callback\n    },\n    [callback]\n  )\n\n  // Set up the interval.\n  useEffect(\n    () => {\n      function tick () {\n        savedCallback.current()\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay)\n        return () => clearInterval(id)\n      }\n    },\n    [delay]\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}